import type { ApiProvider, CallApiContextParams, ProviderOptions, ProviderResponse } from '../types';
import '../util';
interface Blob {
    mimeType: string;
    data: string;
}
interface FunctionCall {
    name: string;
    args?: {
        [key: string]: any;
    };
}
interface FunctionResponse {
    name: string;
    response: {
        [key: string]: any;
    };
}
interface FileData {
    mimeType?: string;
    fileUri: string;
}
interface Part {
    text?: string;
    inlineData?: Blob;
    functionCall?: FunctionCall;
    functionResponse?: FunctionResponse;
    fileData?: FileData;
}
interface Content {
    parts: Part[];
    role?: string;
}
interface Schema {
    type: 'TYPE_UNSPECIFIED' | 'STRING' | 'NUMBER' | 'INTEGER' | 'BOOLEAN' | 'ARRAY' | 'OBJECT';
    format?: string;
    description?: string;
    nullable?: boolean;
    enum?: string[];
    maxItems?: string;
    minItems?: string;
    properties?: {
        [key: string]: Schema;
    };
    required?: string[];
    propertyOrdering?: string[];
    items?: Schema;
}
interface FunctionDeclaration {
    name: string;
    description: string;
    parameters?: Schema;
    response?: Schema;
}
interface GoogleSearchRetrieval {
    dynamicRetrievalConfig: {
        mode?: 'MODE_UNSPECIFIED' | 'MODE_DYNAMIC';
        dynamicThreshold?: number;
    };
}
interface Tool {
    functionDeclarations?: FunctionDeclaration[];
    googleSearchRetrieval?: GoogleSearchRetrieval;
    codeExecution?: object;
    googleSearch?: object;
}
interface CompletionOptions {
    apiKey: string;
    timeoutMs?: number;
    transformResponse?: string | Function;
    context?: string;
    examples?: {
        input: string;
        output: string;
    }[];
    stopSequence?: string[];
    temperature?: number;
    maxOutputTokens?: number;
    topP?: number;
    topK?: number;
    generationConfig?: {
        response_modalities?: string[];
        context?: string;
        examples?: {
            input: string;
            output: string;
        }[];
        stopSequence?: string[];
        temperature?: number;
        maxOutputTokens?: number;
        topP?: number;
        topK?: number;
    };
    toolConfig?: {
        functionCallingConfig?: {
            mode?: 'MODE_UNSPECIFIED' | 'AUTO' | 'ANY' | 'NONE';
            allowedFunctionNames?: string[];
        };
    };
    tools?: Tool[];
    /**
     * If set, automatically call these functions when the assistant activates
     * these function tools.
     */
    functionToolCallbacks?: Record<string, (arg: string) => Promise<any>>;
    systemInstruction?: Content;
}
export declare class GoogleMMLiveProvider implements ApiProvider {
    config: CompletionOptions;
    modelName: string;
    constructor(modelName: string, options: ProviderOptions);
    id(): string;
    toString(): string;
    getApiKey(): string | undefined;
    callApi(prompt: string, context?: CallApiContextParams): Promise<ProviderResponse>;
}
export {};
//# sourceMappingURL=googleMultimodalLive.d.ts.map
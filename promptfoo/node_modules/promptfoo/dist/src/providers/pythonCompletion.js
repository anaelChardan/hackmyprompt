"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PythonProvider = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const cache_1 = require("../cache");
const logger_1 = __importDefault(require("../logger"));
const pythonUtils_1 = require("../python/pythonUtils");
const util_1 = require("../util");
const createHash_1 = require("../util/createHash");
const json_1 = require("../util/json");
class PythonProvider {
    constructor(runPath, options) {
        this.options = options;
        const { filePath: providerPath, functionName } = (0, util_1.parsePathOrGlob)(options?.config.basePath || '', runPath);
        this.scriptPath = path_1.default.relative(options?.config.basePath || '', providerPath);
        this.functionName = functionName || null;
        this.id = () => options?.id ?? `python:${this.scriptPath}:${this.functionName || 'default'}`;
        this.label = options?.label;
        this.config = options?.config ?? {};
    }
    id() {
        return `python:${this.scriptPath}:${this.functionName || 'default'}`;
    }
    async executePythonScript(prompt, context, apiType) {
        const absPath = path_1.default.resolve(path_1.default.join(this.options?.config.basePath || '', this.scriptPath));
        logger_1.default.debug(`Computing file hash for script ${absPath}`);
        const fileHash = (0, createHash_1.sha256)(fs_1.default.readFileSync(absPath, 'utf-8'));
        const cacheKey = `python:${this.scriptPath}:${apiType}:${fileHash}:${prompt}:${JSON.stringify(this.options)}:${JSON.stringify(context?.vars)}`;
        const cache = await (0, cache_1.getCache)();
        let cachedResult;
        if ((0, cache_1.isCacheEnabled)()) {
            cachedResult = (await cache.get(cacheKey));
        }
        if (cachedResult) {
            logger_1.default.debug(`Returning cached ${apiType} result for script ${absPath}`);
            return JSON.parse(cachedResult);
        }
        else {
            if (context) {
                // These are not useful in Python
                delete context.fetchWithCache;
                delete context.getCache;
                delete context.logger;
            }
            const args = apiType === 'call_api' ? [prompt, this.options, context] : [prompt, this.options];
            logger_1.default.debug(`Running python script ${absPath} with scriptPath ${this.scriptPath} and args: ${(0, json_1.safeJsonStringify)(args)}`);
            const functionName = this.functionName || apiType;
            let result;
            switch (apiType) {
                case 'call_api':
                    result = (await (0, pythonUtils_1.runPython)(absPath, functionName, args, {
                        pythonExecutable: this.config.pythonExecutable,
                    }));
                    if (!result ||
                        typeof result !== 'object' ||
                        (!('output' in result) && !('error' in result))) {
                        throw new Error(`The Python script \`${functionName}\` function must return a dict with an \`output\` string/object or \`error\` string, instead got: ${JSON.stringify(result)}`);
                    }
                    break;
                case 'call_embedding_api':
                    result = (await (0, pythonUtils_1.runPython)(absPath, functionName, args, {
                        pythonExecutable: this.config.pythonExecutable,
                    }));
                    if (!result ||
                        typeof result !== 'object' ||
                        (!('embedding' in result) && !('error' in result))) {
                        throw new Error(`The Python script \`${functionName}\` function must return a dict with an \`embedding\` array or \`error\` string, instead got ${JSON.stringify(result)}`);
                    }
                    break;
                case 'call_classification_api':
                    result = (await (0, pythonUtils_1.runPython)(absPath, functionName, args, {
                        pythonExecutable: this.config.pythonExecutable,
                    }));
                    if (!result ||
                        typeof result !== 'object' ||
                        (!('classification' in result) && !('error' in result))) {
                        throw new Error(`The Python script \`${functionName}\` function must return a dict with a \`classification\` object or \`error\` string, instead of ${JSON.stringify(result)}`);
                    }
                    break;
                default:
                    throw new Error(`Unsupported apiType: ${apiType}`);
            }
            if ((0, cache_1.isCacheEnabled)() && !('error' in result)) {
                await cache.set(cacheKey, JSON.stringify(result));
            }
            return result;
        }
    }
    async callApi(prompt, context) {
        return this.executePythonScript(prompt, context, 'call_api');
    }
    async callEmbeddingApi(prompt) {
        return this.executePythonScript(prompt, undefined, 'call_embedding_api');
    }
    async callClassificationApi(prompt) {
        return this.executePythonScript(prompt, undefined, 'call_classification_api');
    }
}
exports.PythonProvider = PythonProvider;
//# sourceMappingURL=pythonCompletion.js.map
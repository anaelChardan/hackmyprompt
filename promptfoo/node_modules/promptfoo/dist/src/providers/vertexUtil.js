"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.maybeCoerceToGeminiFormat = maybeCoerceToGeminiFormat;
exports.getGoogleClient = getGoogleClient;
exports.hasGoogleDefaultCredentials = hasGoogleDefaultCredentials;
const zod_1 = require("zod");
const logger_1 = __importDefault(require("../logger"));
const PartSchema = zod_1.z.object({
    text: zod_1.z.string().optional(),
    inline_data: zod_1.z
        .object({
        mime_type: zod_1.z.string(),
        data: zod_1.z.string(),
    })
        .optional(),
});
const ContentSchema = zod_1.z.object({
    role: zod_1.z.enum(['user', 'model']).optional(),
    parts: zod_1.z.array(PartSchema),
});
const GeminiFormatSchema = zod_1.z.array(ContentSchema);
function maybeCoerceToGeminiFormat(contents) {
    let coerced = false;
    const parseResult = GeminiFormatSchema.safeParse(contents);
    if (parseResult.success) {
        return {
            contents: parseResult.data,
            coerced,
            systemInstruction: undefined,
        };
    }
    let coercedContents;
    if (typeof contents === 'string') {
        coercedContents = [
            {
                parts: [{ text: contents }],
            },
        ];
        coerced = true;
    }
    else if (Array.isArray(contents) &&
        contents.every((item) => typeof item.content === 'string')) {
        // This looks like an OpenAI chat format
        coercedContents = contents.map((item) => ({
            role: item.role,
            parts: [{ text: item.content }],
        }));
        coerced = true;
    }
    else if (Array.isArray(contents) && contents.every((item) => item.role && item.content)) {
        // This looks like an OpenAI chat format with content that might be an array or object
        coercedContents = contents.map((item) => {
            if (Array.isArray(item.content)) {
                // Handle array content
                const parts = item.content.map((contentItem) => {
                    if (typeof contentItem === 'string') {
                        return { text: contentItem };
                    }
                    else if (contentItem.type === 'text') {
                        return { text: contentItem.text };
                    }
                    else {
                        // Handle other content types if needed
                        return contentItem;
                    }
                });
                return {
                    role: item.role,
                    parts,
                };
            }
            else if (typeof item.content === 'object') {
                // Handle object content
                return {
                    role: item.role,
                    parts: [item.content],
                };
            }
            else {
                // Handle string content
                return {
                    role: item.role,
                    parts: [{ text: item.content }],
                };
            }
        });
        coerced = true;
    }
    else if (typeof contents === 'object' && 'parts' in contents) {
        // This might be a single content object
        coercedContents = [contents];
        coerced = true;
    }
    else {
        logger_1.default.warn(`Unknown format for Gemini: ${JSON.stringify(contents)}`);
        return { contents: contents, coerced: false, systemInstruction: undefined };
    }
    const systemPromptParts = [];
    coercedContents = coercedContents.filter((message) => {
        if (message.role === 'system' && message.parts.length > 0) {
            systemPromptParts.push(...message.parts.filter((part) => 'text' in part && typeof part.text === 'string'));
            return false;
        }
        return true;
    });
    return {
        contents: coercedContents,
        coerced,
        systemInstruction: systemPromptParts.length > 0
            ? { parts: systemPromptParts }
            : undefined,
    };
}
let cachedAuth;
async function getGoogleClient() {
    if (!cachedAuth) {
        let GoogleAuth;
        try {
            const importedModule = await Promise.resolve().then(() => __importStar(require('google-auth-library')));
            GoogleAuth = importedModule.GoogleAuth;
        }
        catch {
            throw new Error('The google-auth-library package is required as a peer dependency. Please install it in your project or globally.');
        }
        cachedAuth = new GoogleAuth({
            scopes: 'https://www.googleapis.com/auth/cloud-platform',
        });
    }
    const client = await cachedAuth.getClient();
    const projectId = await cachedAuth.getProjectId();
    return { client, projectId };
}
async function hasGoogleDefaultCredentials() {
    try {
        await getGoogleClient();
        return true;
    }
    catch {
        return false;
    }
}
//# sourceMappingURL=vertexUtil.js.map
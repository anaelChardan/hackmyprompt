import type { ApiProvider, ProviderResponse, CallApiContextParams } from '../types';
import type { EnvOverrides } from '../types/env';
interface GoogleCompletionOptions {
    apiKey?: string;
    apiHost?: string;
    safetySettings?: {
        category: string;
        probability: string;
    }[];
    stopSequences?: string[];
    temperature?: number;
    maxOutputTokens?: number;
    topP?: number;
    topK?: number;
    generationConfig?: Record<string, any>;
    responseSchema?: string;
}
declare class GoogleGenericProvider implements ApiProvider {
    modelName: string;
    config: GoogleCompletionOptions;
    env?: EnvOverrides;
    constructor(modelName: string, options?: {
        config?: GoogleCompletionOptions;
        id?: string;
        env?: EnvOverrides;
    });
    id(): string;
    toString(): string;
    getApiHost(): string | undefined;
    getApiKey(): string | undefined;
    callApi(prompt: string): Promise<ProviderResponse>;
}
export declare class GoogleChatProvider extends GoogleGenericProvider {
    constructor(modelName: string, options?: {
        config?: GoogleCompletionOptions;
        id?: string;
        env?: EnvOverrides;
    });
    callApi(prompt: string, context?: CallApiContextParams): Promise<ProviderResponse>;
    callGemini(prompt: string, context?: CallApiContextParams): Promise<ProviderResponse>;
}
export {};
//# sourceMappingURL=google.d.ts.map
import type { ApiEmbeddingProvider, ApiProvider, CallApiContextParams, ProviderResponse, ProviderEmbeddingResponse } from '../types';
import type { EnvOverrides } from '../types/env';
interface Blob {
    mimeType: string;
    data: string;
}
interface FunctionCall {
    name: string;
    args?: {
        [key: string]: any;
    };
}
interface FunctionResponse {
    name: string;
    response: {
        [key: string]: any;
    };
}
interface FileData {
    mimeType?: string;
    fileUri: string;
}
interface Part {
    text?: string;
    inlineData?: Blob;
    functionCall?: FunctionCall;
    functionResponse?: FunctionResponse;
    fileData?: FileData;
}
interface Content {
    parts: Part[];
    role?: string;
}
interface Schema {
    type: 'TYPE_UNSPECIFIED' | 'STRING' | 'NUMBER' | 'INTEGER' | 'BOOLEAN' | 'ARRAY' | 'OBJECT';
    format?: string;
    description?: string;
    nullable?: boolean;
    enum?: string[];
    maxItems?: string;
    minItems?: string;
    properties?: {
        [key: string]: Schema;
    };
    required?: string[];
    propertyOrdering?: string[];
    items?: Schema;
}
interface FunctionDeclaration {
    name: string;
    description: string;
    parameters?: Schema;
    response?: Schema;
}
export type FunctionParameters = Record<string, unknown>;
interface GoogleSearchRetrieval {
    dynamicRetrievalConfig: {
        mode?: 'MODE_UNSPECIFIED' | 'MODE_DYNAMIC';
        dynamicThreshold?: number;
    };
}
interface Tool {
    functionDeclarations?: FunctionDeclaration[];
    googleSearchRetrieval?: GoogleSearchRetrieval;
    codeExecution?: object;
    googleSearch?: object;
}
interface VertexCompletionOptions {
    apiKey?: string;
    apiHost?: string;
    projectId?: string;
    region?: string;
    publisher?: string;
    apiVersion?: string;
    anthropicVersion?: string;
    anthropic_version?: string;
    context?: string;
    examples?: {
        input: string;
        output: string;
    }[];
    safetySettings?: {
        category: string;
        probability: string;
    }[];
    stopSequence?: string[];
    temperature?: number;
    maxOutputTokens?: number;
    max_tokens?: number;
    topP?: number;
    top_p?: number;
    topK?: number;
    top_k?: number;
    generationConfig?: {
        context?: string;
        examples?: {
            input: string;
            output: string;
        }[];
        stopSequence?: string[];
        temperature?: number;
        maxOutputTokens?: number;
        topP?: number;
        topK?: number;
    };
    toolConfig?: {
        functionCallingConfig?: {
            mode?: 'MODE_UNSPECIFIED' | 'AUTO' | 'ANY' | 'NONE';
            allowedFunctionNames?: string[];
        };
    };
    tools?: Tool[];
    /**
     * If set, automatically call these functions when the assistant activates
     * these function tools.
     */
    functionToolCallbacks?: Record<string, (arg: string) => Promise<string>>;
    systemInstruction?: Content;
    /**
     * Model-specific configuration for Llama models
     */
    llamaConfig?: {
        safetySettings?: {
            enabled?: boolean;
            llama_guard_settings?: Record<string, unknown>;
        };
    };
}
declare class VertexGenericProvider implements ApiProvider {
    modelName: string;
    config: VertexCompletionOptions;
    env?: EnvOverrides;
    constructor(modelName: string, options?: {
        config?: VertexCompletionOptions;
        id?: string;
        env?: EnvOverrides;
    });
    id(): string;
    toString(): string;
    getApiHost(): string | undefined;
    getProjectId(): Promise<string | undefined>;
    getApiKey(): string | undefined;
    getRegion(): string;
    getPublisher(): string | undefined;
    getApiVersion(): string;
    callApi(prompt: string): Promise<ProviderResponse>;
}
export declare class VertexChatProvider extends VertexGenericProvider {
    constructor(modelName: string, options?: {
        config?: VertexCompletionOptions;
        id?: string;
        env?: EnvOverrides;
    });
    callApi(prompt: string, context?: CallApiContextParams): Promise<ProviderResponse>;
    callClaudeApi(prompt: string, context?: CallApiContextParams): Promise<ProviderResponse>;
    callGeminiApi(prompt: string, context?: CallApiContextParams): Promise<ProviderResponse>;
    callPalm2Api(prompt: string): Promise<ProviderResponse>;
    callLlamaApi(prompt: string, context?: CallApiContextParams): Promise<ProviderResponse>;
}
export declare class VertexEmbeddingProvider implements ApiEmbeddingProvider {
    modelName: string;
    config: any;
    env?: any;
    constructor(modelName: string, config?: any, env?: any);
    id(): string;
    getRegion(): string;
    getApiVersion(): string;
    callApi(): Promise<ProviderResponse>;
    callEmbeddingApi(input: string): Promise<ProviderEmbeddingResponse>;
}
export declare const DefaultGradingProvider: VertexChatProvider;
export declare const DefaultEmbeddingProvider: VertexEmbeddingProvider;
export {};
//# sourceMappingURL=vertex.d.ts.map
import type { UnifiedConfig, Prompt, TestSuite, EvaluateTestSuite } from '../types';
export * from './grading';
/**
 * Reads and maps provider prompts based on the configuration and parsed prompts.
 * @param config - The configuration object.
 * @param parsedPrompts - Array of parsed prompts.
 * @returns A map of provider IDs to their respective prompts.
 */
export declare function readProviderPromptMap(config: Pick<Partial<UnifiedConfig>, 'providers'>, parsedPrompts: Prompt[]): TestSuite['providerPromptMap'];
/**
 * Processes a raw prompt based on its content type and path.
 * @param prompt - The raw prompt data.
 * @param basePath - Base path for file resolution.
 * @param maxRecursionDepth - Maximum recursion depth for globbing.
 * @returns Promise resolving to an array of processed prompts.
 */
export declare function processPrompt(prompt: Partial<Prompt>, basePath?: string, maxRecursionDepth?: number): Promise<Prompt[]>;
/**
 * Reads and processes prompts from a specified path or glob pattern.
 * @param promptPathOrGlobs - The path or glob pattern.
 * @param basePath - Base path for file resolution.
 * @returns Promise resolving to an array of processed prompts.
 */
export declare function readPrompts(promptPathOrGlobs: string | (string | Partial<Prompt>)[] | Record<string, string>, basePath?: string): Promise<Prompt[]>;
export declare function processPrompts(prompts: EvaluateTestSuite['prompts']): Promise<TestSuite['prompts']>;
//# sourceMappingURL=index.d.ts.map
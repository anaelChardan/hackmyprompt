"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAndDisplayShareableUrl = createAndDisplayShareableUrl;
exports.shareCommand = shareCommand;
const chalk_1 = __importDefault(require("chalk"));
const dedent_1 = __importDefault(require("dedent"));
const readline_1 = __importDefault(require("readline"));
const url_1 = require("url");
const envars_1 = require("../envars");
const cloud_1 = require("../globalConfig/cloud");
const logger_1 = __importDefault(require("../logger"));
const eval_1 = __importDefault(require("../models/eval"));
const share_1 = require("../share");
const telemetry_1 = __importDefault(require("../telemetry"));
const util_1 = require("../util");
const askForConfirmation = async (hostname) => {
    return new Promise((resolve) => {
        const reader = readline_1.default.createInterface({
            input: process.stdin,
            output: process.stdout,
        });
        reader.question(`Create a private shareable URL of your eval on ${hostname}?\n\nTo proceed, please confirm [Y/n] `, (answer) => {
            reader.close();
            const confirmed = answer.toLowerCase() === 'yes' || answer.toLowerCase() === 'y' || answer === '';
            resolve(confirmed);
        });
    });
};
async function createAndDisplayShareableUrl(evalRecord, showAuth) {
    const url = await (0, share_1.createShareableUrl)(evalRecord, showAuth);
    if (url) {
        logger_1.default.info(`View results: ${chalk_1.default.greenBright.bold(url)}`);
    }
    else {
        logger_1.default.error('Failed to create shareable URL');
        process.exitCode = 1;
    }
    return url;
}
function shareCommand(program) {
    program
        .command('share [evalId]')
        .description('Create a shareable URL of an eval (defaults to most recent)' + '\n\n')
        .option('-y, --yes', 'Skip confirmation')
        .option('--env-file, --env-path <path>', 'Path to .env file')
        .option('--show-auth', 'Show username/password authentication information in the URL if exists', false)
        .action(async (evalId, cmdObj) => {
        (0, util_1.setupEnv)(cmdObj.envPath);
        telemetry_1.default.record('command_used', {
            name: 'share',
        });
        await telemetry_1.default.send();
        let eval_ = null;
        if (evalId) {
            eval_ = await eval_1.default.findById(evalId);
        }
        else {
            eval_ = await eval_1.default.latest();
        }
        if (!eval_) {
            logger_1.default.error('Could not load results. Do you need to run `promptfoo eval` first?');
            process.exitCode = 1;
            return;
        }
        if (eval_.prompts.length === 0) {
            // FIXME(ian): Handle this on the server side.
            logger_1.default.error((0, dedent_1.default) `
              Eval ${chalk_1.default.bold(eval_.id)} cannot be shared.
              This may be because the eval is still running or because it did not complete successfully.
              If your eval is still running, wait for it to complete and try again.
            `);
            process.exitCode = 1;
            return;
        }
        if (cmdObj.yes || (0, envars_1.getEnvString)('PROMPTFOO_DISABLE_SHARE_WARNING')) {
            await createAndDisplayShareableUrl(eval_, cmdObj.showAuth);
            return;
        }
        if (cloud_1.cloudConfig.isEnabled()) {
            logger_1.default.info(`Sharing eval to ${cloud_1.cloudConfig.getAppUrl()}`);
            await createAndDisplayShareableUrl(eval_, cmdObj.showAuth);
            return;
        }
        const baseUrl = (0, envars_1.getEnvString)('PROMPTFOO_SHARING_APP_BASE_URL') ||
            (0, envars_1.getEnvString)('PROMPTFOO_REMOTE_APP_BASE_URL');
        const hostname = baseUrl ? new url_1.URL(baseUrl).hostname : 'app.promptfoo.dev';
        const confirmed = await askForConfirmation(hostname);
        if (!confirmed) {
            process.exitCode = 1;
            return;
        }
        await createAndDisplayShareableUrl(eval_, cmdObj.showAuth);
    });
}
//# sourceMappingURL=share.js.map